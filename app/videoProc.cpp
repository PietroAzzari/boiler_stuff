//opencv
#include "opencv2/imgcodecs.hpp"
#include "opencv2/imgproc.hpp"
#include "opencv2/videoio.hpp"
#include <opencv2/highgui.hpp>
#include <opencv2/video.hpp>
//C
#include <stdio.h>
//C++
#include <iostream>
#include <sstream>
using namespace cv;
using namespace std;
// Global variables
Mat frame; //current frame
Mat fgMaskMOG2; //fg mask fg mask generated by MOG2 method
Ptr<BackgroundSubtractor> pMOG2; //MOG2 Background subtractor
int keyboard; //input from keyboard
void help();
void processVideo(char* videoFilename);
void processImages(char* firstFrameFilename);
void help()
{
    cout
    << "--------------------------------------------------------------------------" << endl
    << "This program shows how to use background subtraction methods provided by "  << endl
    << " OpenCV. You can process both videos (-vid) and images (-img)."             << endl
                                                                                    << endl
    << "Usage:"                                                                     << endl
    << "./bs {-vid <video filename>|-img <image filename>}"                         << endl
    << "for example: ./bs -vid video.avi"                                           << endl
    << "or: ./bs -img /data/images/1.png"                                           << endl
    << "--------------------------------------------------------------------------" << endl
    << endl;
}
int main(int argc, char* argv[])
{
    //print help information
    help();
    //check for the input parameter correctness
    if(argc != 3) {
        cerr <<"Incorret input list" << endl;
        cerr <<"exiting..." << endl;
        return EXIT_FAILURE;
    }
    //create GUI windows
    namedWindow("Frame");
    namedWindow("FG Mask MOG 2");
    //create Background Subtractor objects
    pMOG2 = createBackgroundSubtractorMOG2(500, 900, true); //MOG2 approach
    if(strcmp(argv[1], "-vid") == 0) {
        //input data coming from a video
        processVideo(argv[2]);
    }
    else if(strcmp(argv[1], "-img") == 0) {
        //input data coming from a sequence of images
        processImages(argv[2]);
    }
    else {
        //error in reading input parameters
        cerr <<"Please, check the input parameters." << endl;
        cerr <<"Exiting..." << endl;
        return EXIT_FAILURE;
    }
    //destroy GUI windows
    destroyAllWindows();
    return EXIT_SUCCESS;
}
void processVideo(char* videoFilename) {
    //create the capture object
    VideoCapture capture(videoFilename);
    if(!capture.isOpened()){
        //error in opening the video input
        cerr << "Unable to open video file: " << videoFilename << endl;
        exit(EXIT_FAILURE);
    }
    
    // Default resolution of the frame is obtained.The default resolution is system dependent. 
    int frame_width = capture.get(CV_CAP_PROP_FRAME_WIDTH); 
    int frame_height = capture.get(CV_CAP_PROP_FRAME_HEIGHT); 
    
    // Define the codec and create VideoWriter object.The output is stored in 'outcpp.avi' file. 
    VideoWriter video("/home/pazzari/Downloads/out1080p.avi",CV_FOURCC('M','J','P','G'),30, Size(frame_width,frame_height)); 
  
    //read input data. ESC or 'q' for quitting
    int frame_number=0;
    while( (char)keyboard != 'q' && (char)keyboard != 27 ){
        //read the current frame
        if(!capture.read(frame)) {
            cerr << "Unable to read next frame." << endl;
            cerr << "Exiting..." << endl;
            exit(EXIT_FAILURE);
        }
        //update the background model
        pMOG2->apply(frame, fgMaskMOG2);
            
        int erosion_type = 0;
        erosion_type = MORPH_RECT;
        Mat erosion_dst;
        Mat dilation_dst;
        int erosion_size=1;
        Mat element = getStructuringElement( erosion_type,
                       Size( 2*erosion_size + 1, 2*erosion_size+1 ),
                       Point( erosion_size, erosion_size ) );
        erode( fgMaskMOG2, erosion_dst, element );
        dilate( erosion_dst, dilation_dst, element );
        
        Mat labels;
        Mat stats;
        Mat centroids;
        cv::connectedComponentsWithStats(dilation_dst, labels, stats, centroids);
        
        //std::cout << labels << std::endl;
        std::cout << "#### frame_number: " << frame_number << std::endl;
        bool detected=false;
        if (stats.rows>1)
        {
            std::cout << "stats.size()=" << stats.size() << std::endl;
            //std::cout << centroids << std::endl;
            
            for(int i=1; i<stats.rows; i++)
            {
                int x = stats.at<int>(Point(0, i));
                int y = stats.at<int>(Point(1, i));
                int w = stats.at<int>(Point(2, i));
                int h = stats.at<int>(Point(3, i));
                
                std::cout << "x=" << x << " y=" << y << " w=" << w << " h=" << h << " area=" << w*h << std::endl;
                
                Rect rect(x,y,w,h);
                if (w*h>200)
                {
                    Scalar color(0,0,255);
                    cv::rectangle(frame, rect, color);
                    detected=true;
                }
                else
                {
                    Scalar color(0,255,0);
                    cv::rectangle(frame, rect, color);
                }
                
            }
        }

        //get the frame number and write it on the current frame
        stringstream ss;
        if (detected)
        {
            Scalar color(0,0,255);
            rectangle(frame, cv::Point(10, 2), cv::Point(100,20),color, -1);
        }
        else
        {
            Scalar color(0,255,0);
            rectangle(frame, cv::Point(10, 2), cv::Point(100,20),color, -1);
        }
        
        ss << capture.get(CAP_PROP_POS_FRAMES);
        string frameNumberString = ss.str();
        putText(frame, frameNumberString.c_str(), cv::Point(15, 15),
                FONT_HERSHEY_SIMPLEX, 0.5 , cv::Scalar(0,0,0));
        //show the current frame and the fg masks
        
        imshow("Frame", frame);
        imshow("FG Mask MOG 2", dilation_dst);
        
        // Write the frame into the file 'outcpp.avi'
        video.write(frame);
        
        //get the input from the keyboard
        keyboard = waitKey( 30 );
        frame_number++;
    }
    //delete capture object
    capture.release();
    video.release();
}
void processImages(char* fistFrameFilename) {
    //read the first file of the sequence
    frame = imread(fistFrameFilename);
    if(frame.empty()){
        //error in opening the first image
        cerr << "Unable to open first image frame: " << fistFrameFilename << endl;
        exit(EXIT_FAILURE);
    }
    //current image filename
    string fn(fistFrameFilename);
    //read input data. ESC or 'q' for quitting
    while( (char)keyboard != 'q' && (char)keyboard != 27 ){
        //update the background model
        pMOG2->apply(frame, fgMaskMOG2);
        //get the frame number and write it on the current frame
        size_t index = fn.find_last_of("/");
        if(index == string::npos) {
            index = fn.find_last_of("\\");
        }
        size_t index2 = fn.find_last_of(".");
        string prefix = fn.substr(0,index+1);
        string suffix = fn.substr(index2);
        string frameNumberString = fn.substr(index+1, index2-index-1);
        istringstream iss(frameNumberString);
        int frameNumber = 0;
        iss >> frameNumber;
        rectangle(frame, cv::Point(10, 2), cv::Point(100,20),
                  cv::Scalar(255,255,255), -1);
        putText(frame, frameNumberString.c_str(), cv::Point(15, 15),
                FONT_HERSHEY_SIMPLEX, 0.5 , cv::Scalar(0,0,0));
        //show the current frame and the fg masks
        imshow("Frame", frame);
        imshow("FG Mask MOG 2", fgMaskMOG2);
        //get the input from the keyboard
        keyboard = waitKey( 30 );
        //search for the next image in the sequence
        ostringstream oss;
        oss << (frameNumber + 1);
        string nextFrameNumberString = oss.str();
        string nextFrameFilename = prefix + nextFrameNumberString + suffix;
        //read the next frame
        frame = imread(nextFrameFilename);
        if(frame.empty()){
            //error in opening the next image in the sequence
            cerr << "Unable to open image frame: " << nextFrameFilename << endl;
            exit(EXIT_FAILURE);
        }
        //update the path of the current frame
        fn.assign(nextFrameFilename);
    }
}
